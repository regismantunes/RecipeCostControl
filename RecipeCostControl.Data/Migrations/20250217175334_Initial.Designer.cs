// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeCostControl.Data.Context;

#nullable disable

namespace RecipeCostControl.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250217175334_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("MeasurementUnitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.MeasurementUnit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");

                    b.HasData(
                        new
                        {
                            Id = "kg",
                            Description = "Quilo"
                        },
                        new
                        {
                            Id = "gr",
                            Description = "Grama"
                        },
                        new
                        {
                            Id = "lt",
                            Description = "Litro"
                        },
                        new
                        {
                            Id = "ml",
                            Description = "Mililitro"
                        },
                        new
                        {
                            Id = "un",
                            Description = "Unidade"
                        });
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.MeasurementUnitConversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementUnitFromId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasurementUnitToId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Multiplier")
                        .HasColumnType("decimal(10,5)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitFromId");

                    b.HasIndex("MeasurementUnitToId");

                    b.ToTable("MeasurementUnitConversions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MeasurementUnitFromId = "kg",
                            MeasurementUnitToId = "gr",
                            Multiplier = 0.001
                        },
                        new
                        {
                            Id = 2,
                            MeasurementUnitFromId = "gr",
                            MeasurementUnitToId = "kg",
                            Multiplier = 1000.0
                        },
                        new
                        {
                            Id = 3,
                            MeasurementUnitFromId = "lt",
                            MeasurementUnitToId = "ml",
                            Multiplier = 0.001
                        },
                        new
                        {
                            Id = 4,
                            MeasurementUnitFromId = "ml",
                            MeasurementUnitToId = "lt",
                            Multiplier = 1000.0
                        });
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Packaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("MeasurementUnitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Packaging");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("MeasurementUnitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PackagingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PackagingId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("MeasurementUnitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<uint>("YieldQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.RecipeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementUnitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeItem");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Ingredient", b =>
                {
                    b.HasOne("RecipeCostControl.Data.Entities.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeCostControl.Data.Entities.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.MeasurementUnitConversion", b =>
                {
                    b.HasOne("RecipeCostControl.Data.Entities.MeasurementUnit", "MeasurementUnitFrom")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeCostControl.Data.Entities.MeasurementUnit", "MeasurementUnitTo")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeasurementUnitFrom");

                    b.Navigation("MeasurementUnitTo");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Packaging", b =>
                {
                    b.HasOne("RecipeCostControl.Data.Entities.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Product", b =>
                {
                    b.HasOne("RecipeCostControl.Data.Entities.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeCostControl.Data.Entities.Packaging", "Packaging")
                        .WithMany()
                        .HasForeignKey("PackagingId");

                    b.HasOne("RecipeCostControl.Data.Entities.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Packaging");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Recipe", b =>
                {
                    b.HasOne("RecipeCostControl.Data.Entities.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.RecipeItem", b =>
                {
                    b.HasOne("RecipeCostControl.Data.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeCostControl.Data.Entities.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeCostControl.Data.Entities.Recipe", "Recipe")
                        .WithMany("Items")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeCostControl.Data.Entities.Recipe", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
